# tasks/main.yml

- name: Install PostgreSQL # This task uses the apt module to ensure PostgreSQL is installed on the system.
  apt:
    name: postgresql
    state: present
    update_cache: yes

- name: Ensure PostgreSQL service is started and enabled # This uses the systemd module to ensure that PostgreSQL starts on boot and is currently running.
  systemd:
    name: postgresql
    enabled: yes
    state: started

- name: Create PostgreSQL Database
  postgresql_db:
    name: "{{ django_db_name }}"
    state: present
    login_user: "{{ postgres_admin_user }}"
    login_password: "{{ postgres_admin_password }}"
    login_host: "{{ postgres_db_host }}"
    login_port: "{{ postgres_db_port }}"

- name: Create PostgreSQL User
  postgresql_user:
    name: "{{ django_db_user }}"
    password: "{{ django_db_password }}"
    role_attr_flags: "LOGIN"
    state: present
    login_user: "{{ postgres_admin_user }}"
    login_password: "{{ postgres_admin_password }}"
    login_host: "{{ postgres_db_host }}"
    login_port: "{{ postgres_db_port }}"

- name: Grant privileges to the user
  postgresql_user:
    name: "{{ django_db_user }}"
    db: "{{ django_db_name }}"
    role_attr_flags: "CREATEDB,CREATEROLE"
    state: present
    login_user: "{{ postgres_admin_user }}"
    login_password: "{{ postgres_admin_password }}"
    login_host: "{{ postgres_db_host }}"
    login_port: "{{ postgres_db_port }}"


- name: Ensure PostgreSQL user has access to the database # The postgresql_privs module grants the created user permissions to interact with the specified database.
  postgresql_privs:
    database: "{{ django_db_name }}"
    role: "{{ django_db_user }}"
    priv: ALL
    state: present
